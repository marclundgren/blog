{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/when-slicing-a-sunflower-goes-wrong/","webpackCompilationHash":"71ce59e71c8216837e80","result":{"data":{"markdownRemark":{"id":"597ccb68-80de-527a-a9de-76670d68f897","html":"<p>If you’ve ever built a UI that has a responsive width and fixed height chances are you’ve had to consider truncating strings with variable length. <a href=\"https://css-tricks.com/almanac/properties/t/text-overflow/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">text-overflow</code></a> is a property of CSS that can prevent a string from breaking out of its container by replacing the bits of the string that won’t fit in the container with some ellipsis. You know…these things…</p>\n<p>Sometimes, in javascript we need to truncate a string by slicing it. Let’s say you need to split user-generated string by an arbitraty length because there’s a character limit and you want to preserve the string parts that don’t exceed said limit. E.g. building a twitter clone, but rather than prevent a post submission that exceeds the current (2019) limit of 280 characters.</p>\n<h2 id=\"the-problem\"><a href=\"#the-problem\" aria-label=\"the problem permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Problem</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Split</a> is not unicode aware. Some (all?) emojis consist of not <strong>one</strong> but <strong>two</strong> unicode characters.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'🌻'</span><span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 2</span></code></pre></div>\n<p>This fact can lead to some funky behavior when trying to split strings.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'🌻'</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// \"�\"</span></code></pre></div>\n<p>In fact, the results above are all from Chrome 75. Try this in your browser. Results may vary.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Chrome</span>\n<span class=\"token string\">'a 🌻'</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"a �\"</span>\n\n<span class=\"token comment\">// Firefox</span>\n<span class=\"token string\">'a 🌻'</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"a \\ud83c\"</span>\n\n<span class=\"token comment\">// Safari</span>\n<span class=\"token string\">'a 🌻'</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"a \" 👈 running this results in a string that cannot be copied to the clipboard</span>\n\n<span class=\"token comment\">// All Browsers</span>\n<span class=\"token string\">'a 🌻'</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"a \"</span>\n\n<span class=\"token string\">'a 🌻'</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"a 🌻\"</span></code></pre></div>\n<h2 id=\"a-javascript-solution\"><a href=\"#a-javascript-solution\" aria-label=\"a javascript solution permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A JavaScript Solution</h2>\n<p><a href=\"https://github.com/dotcypress/runes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Runes: ✂️ Unicode-aware JS string splitting</a>. This package will account for <a href=\"http://en.wikipedia.org/wiki/UTF-16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">surrogate pairs</a>, including our favorite emoji: 🌻!</p>\n<h2 id=\"my-advice\"><a href=\"#my-advice\" aria-label=\"my advice permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>My Advice</h2>\n<p>Stick with css text-overflow and be done with the problem. If a user generates a string too long, apply validation to reject the post or record or whatever is being generated. If titles can be any length, but a view just doesn’t support long titles simply use css text-overflow. When in doubt, use CSS over JavaScript as much as possible.</p>","fields":{"slug":"/posts/when-slicing-a-sunflower-goes-wrong/","tagSlugs":["/tag/java-script/"]},"frontmatter":{"date":"2019-07-14T03:27:01.785Z","description":"JavaScript has a unicode problem. Splitting strings can cause trouble.","tags":["JavaScript"],"title":"When slicing a 🌻 goes wrong"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/when-slicing-a-sunflower-goes-wrong/"}}}